package com.mygdx.game;

import java.util.*;
import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

public class MyGdxGame extends ApplicationAdapter implements InputProcessor {
	SpriteBatch batch;
	Sprite arrow1;
	Texture img;
	Texture projectile;
	int x = 0;
	int y = 0;
	int vx = 3;
	int vy = 3;
	int arrowVX =5;
	int arrowVY = -1;

	ArrayList<Sprite> arrows = new ArrayList<Sprite>();


	@Override
	public void create () {
		batch = new SpriteBatch();
		img = new Texture("stickman.png");
		projectile = new Texture("arrow.png");
		arrow1 = new Sprite(img);

		x = Gdx.graphics.getWidth() / 2;
		y = Gdx.graphics.getHeight() / 2;
		arrow1.setPosition(x, y);
		System.out.println("Screen size: " + Gdx.graphics.getWidth() + ", " + Gdx.graphics.getHeight());

		Gdx.input.setInputProcessor(this);
	}

	@Override
	public void render () {
		Gdx.gl.glClearColor(1, 1, 1, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

		int Ax = Gdx.input.getX();
		int Ay = Gdx.graphics.getHeight() - Gdx.input.getY();

		if (Gdx.input.isKeyPressed(Input.Keys.W)) {
			// use translate(vx,vy), translateX(vx) or translateY(vy)
			arrow1.translateY(vy);
		} if (Gdx.input.isKeyPressed(Input.Keys.A)) {
			arrow1.translateX(vx*-1);
		} if (Gdx.input.isKeyPressed(Input.Keys.S)) {
			arrow1.translateY(vy*-1);
		} if (Gdx.input.isKeyPressed(Input.Keys.D)) {
			arrow1.translateX(vx);
		}
		//if (Gdx.input.isKeyPressed(Input.Keys.SPACE)) {
		//	fire();
		//}


		// move arrows
		for(int i=0; i < arrows.size(); i++) {
			arrows.get(i).translateX(Ax);
			arrows.get(i).translateY(Ay);
		}

		batch.begin();
		batch.draw(img, x, y);
		// draw arrows to the screen
		for(int i = 0; i < arrows.size(); i++) {
			arrows.get(i).draw(batch);
		}
		batch.end();
	}

	@Override
	public void dispose () {
		batch.dispose();
		img.dispose();
	}

	@Override
	public boolean scrolled(int amount) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean mouseMoved(int screenX, int screenY) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDragged(int screenX, int screenY, int pointer) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	// Mouse up/touch released
	public boolean touchUp(int screenX, int screenY, int pointer, int button) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	// Mouse down/touched
	public boolean touchDown(int screenX, int screenY, int pointer, int button) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean keyTyped(char character) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean keyUp(int keycode) {
		return false;
	}

	@Override
	public boolean keyDown(int keycode) {
		if (keycode == Keys.SPACE){
			fire();
		}
		return false;
	}

	private void fire() {
		Sprite arrow = new Sprite(projectile);
		// projectile starts at sprite
		arrow.setPosition(arrow1.getX() + 45, arrow1.getY() + 25);
		arrows.add(arrow);
	}
}
